'''
斐波那契数 （通常用 F(n) 表示）形成的序列称为 斐波那契数列 。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：

F(0) = 0，F(1) = 1
F(n) = F(n - 1) + F(n - 2)，其中 n > 1
给定 n ，请计算 F(n) 。
'''
# 在斐波那契数列问题中，动态规划的体现主要是通过构建解决方案的过程，从最基本的已知解开始，逐步构建直到最终解决整个问题。
# 在具体实现中，动态规划体现在迭代地更新 a 和 b 的过程中。每次循环，这两个变量都在保存当前位置和前一位置的斐波那契数，而每个新的斐波那契数都是基于这两个值计算得出的。通过这种方式，我们不断更新解决问题所需的“状态”，直到达到所需的最终状态（F(n)）。这种方法实质上是一种非常节省空间的动态规划实现，它避免了大规模数据的存储，但本质上仍然是在使用动态规划的核心思想——建立在之前计算结果的基础上进行递推。
class Solution:
    def fib(self, n: int) -> int:
        # 特殊情况：n为0或1时，斐波那契数就是n本身
        if n <= 1:
            return n
        
        # 初始化前两个斐波那契数
        a, b = 0, 1
        
        # 从第2项开始计算到第n项
        for i in range(2, n + 1):
            # 下一个斐波那契数是前两个斐波那契数之和
            a, b = b, a + b
        
        # 第n项斐波那契数存储在b中
        return b

# 用例测试
sol = Solution()
print(sol.fib(10))  # 输出应该是55
